import tkinter as tk
from tkinter import filedialog, messagebox
import os
import sys
import shutil
import subprocess
from pkg_resources import working_set
import logging

# Set up logging
logging.basicConfig(
    level=logging.DEBUG,
    filename='tb2e.log',
    format='%(asctime)s - %(levelname)s - %(message)s'
)

def get_base_path():
    """Get the base path for the application, working with both script and PyInstaller"""
    if getattr(sys, 'frozen', False):
        return os.path.dirname(sys.executable)
    return os.path.dirname(os.path.abspath(__file__))

def check_and_install_pyinstaller():
    """Check for PyInstaller installation with proper handling for frozen apps"""
    if getattr(sys, 'frozen', False):
        # Running as executable - check system PATH for pyinstaller
        try:
            subprocess.check_call(['pyinstaller', '--version'],
                                  stdout=subprocess.DEVNULL,
                                  stderr=subprocess.DEVNULL)
            return True
        except (subprocess.CalledProcessError, FileNotFoundError):
            messagebox.showerror("Error", "PyInstaller not found in system PATH.\n"
                                          "Please install manually: pip install pyinstaller")
            return False
    else:
        # Running from source - install via pip if needed
        if 'PyInstaller' not in [pkg.key for pkg in working_set]:
            try:
                subprocess.check_call([sys.executable, '-m', 'pip', 'install', 'pyinstaller'])
                return True
            except subprocess.CalledProcessError as e:
                messagebox.showerror("Error", f"Failed to install PyInstaller: {e}\n"
                                              "Please install manually: pip install pyinstaller")
                return False
        return True

def select_batch_file():
    selected_file = filedialog.askopenfilename(filetypes=[("Batch files", "*.bat")])
    if selected_file:
        file_path.set(selected_file)
        validate_and_update_button()

def select_icon_file():
    selected_file = filedialog.askopenfilename(filetypes=[("Icon files", "*.ico")])
    if selected_file:
        icon_path.set(selected_file)
        validate_and_update_button()

def validate_and_update_button():
    if (file_path.get().endswith('.bat') and 
        icon_path.get().endswith('.ico') and
        os.path.exists(file_path.get()) and
        os.path.exists(icon_path.get())):
        convert_button.config(state='normal')
    else:
        convert_button.config(state='disabled')

def convert_to_exe():
    if not check_and_install_pyinstaller():
        return

    batch_file = file_path.get()
    icon_file = icon_path.get()
    base_path = get_base_path()

    # Create temporary directory in base path
    temp_dir = os.path.join(base_path, 'tb2e_temp')
    os.makedirs(temp_dir, exist_ok=True)

    try:
        # Create wrapper script
        wrapper_path = os.path.join(temp_dir, 'wrapper.py')
        batch_name = os.path.basename(batch_file)
        with open(wrapper_path, 'w', encoding='utf-8') as f:
            f.write(f'''# Wrapper script generated by TB2E
import os
import subprocess
import sys

def get_base_path():
    if getattr(sys, 'frozen', False):
        return os.path.dirname(sys.executable)
    return os.path.dirname(os.path.abspath(__file__))

batch_path = os.path.join(get_base_path(), '{batch_name}')

try:
    subprocess.run([batch_path], shell=True, check=True)
except Exception as e:
    input(f"Error running batch file: {{e}}\\nPress Enter to exit...")
    sys.exit(1)
''')

        # Copy batch file to temp dir
        temp_batch = os.path.join(temp_dir, batch_name)
        shutil.copy2(batch_file, temp_batch)

        # Build PyInstaller command
        cmd = [
            'pyinstaller',
            '--onefile',
            '--noconsole',
            f'--icon={icon_file}',
            '--distpath', os.path.join(base_path, 'dist'),
            '--workpath', os.path.join(base_path, 'build'),
            '--specpath', base_path,
            '--add-data', f'{temp_batch}{os.pathsep}.',
            wrapper_path
        ]

        # Run PyInstaller
        result = subprocess.run(cmd, capture_output=True, text=True, cwd=base_path)
        
        if result.returncode == 0:
            # Move generated exe to original batch file location
            src_exe = os.path.join(base_path, 'dist', 'wrapper.exe')
            dest_exe = os.path.join(os.path.dirname(batch_file), 
                                   os.path.splitext(batch_name)[0] + '.exe')
            shutil.move(src_exe, dest_exe)
            messagebox.showinfo("Success", f"EXE created successfully:\n{dest_exe}")
        else:
            logging.error(f"PyInstaller Error:\\n{result.stderr}")
            messagebox.showerror("Error", f"Conversion failed:\\n{result.stderr}")

    except Exception as e:
        logging.error(f"Conversion Error: {str(e)}")
        messagebox.showerror("Error", f"Critical error occurred:\\n{str(e)}")
    finally:
        # Cleanup temporary files
        for path in [temp_dir, 
                    os.path.join(base_path, 'build'),
                    os.path.join(base_path, 'dist'),
                    os.path.join(base_path, 'wrapper.spec')]:
            if os.path.exists(path):
                try:
                    if os.path.isfile(path):
                        os.remove(path)
                    else:
                        shutil.rmtree(path)
                except Exception as e:
                    logging.warning(f"Cleanup failed for {path}: {str(e)}")

# GUI Setup
app = tk.Tk()
app.title("Towel Bat2Exe")
app.resizable(False, False)

file_path = tk.StringVar()
icon_path = tk.StringVar()

main_frame = tk.Frame(app, padx=10, pady=10)
main_frame.pack()

# Batch File Selection
tk.Label(main_frame, text="Batch File:").grid(row=0, column=0, sticky='w')
tk.Entry(main_frame, textvariable=file_path, width=50).grid(row=0, column=1, padx=5)
tk.Button(main_frame, text="Browse", command=select_batch_file).grid(row=0, column=2)

# Icon File Selection
tk.Label(main_frame, text="Icon File:").grid(row=1, column=0, sticky='w', pady=5)
tk.Entry(main_frame, textvariable=icon_path, width=50).grid(row=1, column=1, padx=5)
tk.Button(main_frame, text="Browse", command=select_icon_file).grid(row=1, column=2)

# Convert Button
convert_button = tk.Button(main_frame, text="Convert to EXE", 
                          command=convert_to_exe, state='disabled', width=20)
convert_button.grid(row=2, column=1, pady=10)

# Validation triggers
file_path.trace_add('write', lambda *_: validate_and_update_button())
icon_path.trace_add('write', lambda *_: validate_and_update_button())

app.mainloop()
